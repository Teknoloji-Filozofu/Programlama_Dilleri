/*
 Kuyruk veri yapısının dizi ile uygulanması.
*/

#include <stdio.h>
#define N 6

int queue[N];
int front = 0, rear = 0, count = 0;

void enqueue(int a){
	if(count == N){
		printf(" Kuyrukta yer yoktur. \n");
}
	else{
		queue[rear] = a;
		rear ++;
		if(rear == N) rear = 0;
			count ++;
		printf(" %d kuyruga eklendi. \n", a);
 }
}

void dequeue(){
	if(count == 0){
		printf(" Kuyrukta eleman yoktur. \n");
}
	else{
		int a = queue[front];
		front ++;
		if(front == N) front = 0;
			count --;
		printf(" %d kuyruktan cikarildi. \n", a);
}

/*
 Kuyruk veri yapısının bağlı liste ile uygulanması.
*/

#include<stdio.h>
#include<stdlib.h>

struct Node{
	int data;
	struct Node* next;
};

	struct Node* front = NULL;
	struct Node* rear = NULL;
	
void enqueue(int a){
	struct Node* t = (struct Node*) malloc(sizeof(struct Node));
	t->data = a;
	t->next = NULL;
	
	if(front == NULL && rear == NULL){
		front = rear = t;
}
	else{
		rear->next = t;
		rear = t;
}

	 printf(" %d kuyruga eklendi \n", a);
}

void dequeue() {
	if(front == NULL){
		printf(" Kuyrukta eleman yoktur \n");
}
	else{
		struct Node* t = front;
		if(front == rear){
			front = rear = NULL;
}
		else{
			front = front->next;
}

		printf(" %d kuyruktan cikarildi \n", t->data);
		free(t);
}
}

